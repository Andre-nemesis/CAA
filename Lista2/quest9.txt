1 -> Pesquisa 1
    Para calcular a complexidade dessa recursão precisa-se notar todas as linhas que irão ser impactantes para 
    determinar a complexidade, como este primeiro algoritmo possui apenas duas linhas apos uma verificação,
    pode-se atribuir apenas elas para realizar a formação da complexidade dela, na primeira linha após o 'if'
    nota-se que existe uma função de custo n³, onde multiplica o 'n' (entrada) por ele mesmo 3 vezes, e este 
    número e passado para a função novamente para realizar a recursão, contudo esse 'n³' é passado para a recursão
    com aproximadamente 1/3 de seu valor, assim pode-se determinar que função de complexidade é:
        -> T(n) = T(n/3) + n³
           Onde T(n/3) é o 1/3 da entrada passada na primeira recursão e n³ o custo de multiplicar o 'n' 3 vezes por si.

2 -> Pesquisa 2
    Para essa pesquisa, nota-se que ela possui uma variação do algoritmo de pesquisa anterior, como é adicionado
    uma função para calcular o maior número entre os elementos do vetor, então haverá uma função de custo 'n' para
    realizar essa busca pelo o maior elemento, a ultima linha de recursão dividirá a entrada (maior elemento encontrado)
    por 5, e haverá apenas mais uma adição na função de recorrência para realizar o calcul da complexidade que será a
    adição da multiplicação (3 vezes) pela a entrada, assim a função de complexidade é:
        -> T(n) = 3.T(n/5) + n
           Onde T(n/5) é a entrada o '3' a multplicação após a divisão da entrada e o '+ n' a função para calcular
           o maior elemento novamente.

3 -> Pesquisa 3
    Para essa pesquisa a formação de complexidade será semelhante ao algoritmo anterior, uma das poucas difereças que
    sergue é a instrução para que seja ordenado o vetor com os elementos, dados os algoritmos de ordenação apresentados
    o melhor a ser utilizado será um que possui um valor  n.log(n) pois não será tão lento quanto um n², assim a função
    de complexidade é:
        -> T(n) = 2.T(n/3) + n.log(n)
           Onde T(n/3) é a entrada sendo dividida por 3 e o '2' antes da entrada se encontra na instrução dada no código
           de multiplicar a entrada agora reduzida por 3, mais o tempo do algoritmo de ordenação n.log(n).

4 -> Mágica
    Para essa recursão, o algoritmo dado é um quicksort com algumas leves alterações na localização de parametros, assim
    a sua função de complexidade será o mesma para o algoritmo quicksort onde será Ω(n.log(n)) θ(n.log(n)) e em pior caso
    O(n²)
